{"version":3,"sources":["components/data.js","components/statistics.js","App.js","index.js"],"names":["Table","props","state","data","axios","get","then","setState","catch","err","console","log","id","this","map","item","key","_id","date","slice","indexOf","nature","amount","narration","React","Component","months","maxRange","Date","getFullYear","Stats","dataset","curMonth","getMonth","curDataset","forEach","index","i","prevState","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","currExp","currCap","expData","capData","App","handleNature","e","target","value","handleNAmt","amt","handleNarr","narr","capAmt","expAmt","capAmtArray","expAmtArray","thisMonthCapAmtArray","thisMonthExpAmtArray","totalCap","totalExp","className","action","name","onInput","bind","defaultChecked","type","cols","rows","onClick","method","url","now","toString","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b82de87.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\nimport axios from 'axios'\n\nexport default class Table extends React.Component  {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: []\n        }\n    }\n    async componentDidMount() {\n        await axios.get('http://localhost:3000/entry/').then(data => {\n            this.setState({data: data.data})\n        }).catch(err => console.log(err))\n    }\n    render() {\n        return (\n            <table id=\"ac-table\">\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Nature</th>\n                        <th>Amount</th>\n                        <th>Narration</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.state.data.map(item => {\n                            return (\n                                <tr key={item._id}>\n                                    <td>{item.date.slice(0,item.date.indexOf('GMT') - 1)}</td>\n                                    <td>{item.nature}</td>\n                                    <td>{item.amount}</td>\n                                    <td>{item.narration}</td>\n                                </tr>\n                            );\n                        })\n                    }\n                </tbody>\n            </table>\n        );\n    }\n}","import React from 'react'\nimport '../App.css'\nimport {Line} from 'react-chartjs-2'\n\nconst months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nconst maxRange = [31,new Date().getFullYear()%4===0?29:28,31,30,31,30,31,31,30,31,30,31]\nclass Stats extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [],\n            dataset: [],\n            curMonth: new Date().getMonth(),\n            curDataset: []\n        }\n    }\n    componentDidMount() {\n        months.forEach((item,index) => {\n            for (let i = 1; i <= maxRange[index]; i++) {\n                this.setState(prevState => ({\n                    dataset: [...prevState.dataset, item + i]\n                }))\n            }\n        })\n        for(let i = 1; i <= maxRange[this.state.curMonth];i++) {\n            this.setState(prevState => ({\n                curDataset: [...prevState.curDataset, months[this.state.curMonth] + i]\n            }))\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Line \n                data={{\n                    labels: this.state.curDataset,\n                    datasets: [\n                        {\n                            label: 'Expenses',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: '#fff',\n                            borderColor: 'rgba(75,192,192,1)',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: 'rgba(75,192,192,1)',\n                            pointBackgroundColor: '#fff',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: this.props.currExp\n                        },\n                        {\n                            label: 'Income',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: '#fff',\n                            borderColor: '#dc143c',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: 'rgba(75,192,192,1)',\n                            pointBackgroundColor: '#fff',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: this.props.currCap\n                        }\n                    ]\n                }}\n                />\n                Month-wise graphical representation\n                <Line \n                data={{\n                    labels: this.state.dataset,\n                    datasets: [\n                        {\n                            label: 'Expenses',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: '#fff',\n                            borderColor: 'rgba(75,192,192,1)',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: 'rgba(75,192,192,1)',\n                            pointBackgroundColor: '#fff',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: this.props.expData\n                        },\n                        {\n                            label: 'Income',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: '#fff',\n                            borderColor: '#dc143c',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: 'rgba(75,192,192,1)',\n                            pointBackgroundColor: '#fff',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: this.props.capData\n                        }\n                    ]\n                }}\n                />\n                cumulative year-wise graphical representation\n            </div>\n        );\n    }\n}\n\nexport default Stats","import React from 'react';\nimport './App.css';\nimport Table from './components/data'\nimport axios from 'axios'\nimport Stats from './components/statistics';\n\nconst months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      nature: 'Capital',\n      amt: 0,\n      narr: '',\n      capAmt: 0,\n      expAmt: 0,\n      capAmtArray: [],\n      expAmtArray: [],\n      curMonth: months[new Date().getMonth()],\n      thisMonthCapAmtArray: [],\n      thisMonthExpAmtArray: []\n    }\n  }\n  handleNature = e => {\n    this.setState({nature: e.target.value})\n  }\n  handleNAmt = e => {\n    this.setState({amt: e.target.value})\n  }\n  handleNarr = e => {\n    this.setState({narr: e.target.value})\n  }\n  async componentDidMount() {\n    await axios.get('http://localhost:3000/entry/info').then(data => {\n        this.setState({capAmt: data.data.totalCap})\n        this.setState({expAmt: data.data.totalExp})\n    }).catch(err => console.log(err))\n    await axios.get('http://localhost:3000/entry').then(data => {\n      data.data.forEach(item => {\n        if(item.nature === 'Capital')\n          this.setState(prevState => ({capAmtArray: [...prevState.capAmtArray,item.amount]}))\n        else\n          this.setState(prevState => ({expAmtArray: [...prevState.expAmtArray,item.amount]}))\n      });\n    }).catch(err => console.log(err))\n    await axios.get('http://localhost:3000/entry/info/month/' + this.state.curMonth).then(data => {\n       data.data.forEach(item => {\n        if(item.nature === 'Capital')\n          this.setState(prevState => ({thisMonthCapAmtArray: [...prevState.thisMonthCapAmtArray,item.amount]}))\n        else\n          this.setState(prevState => ({thisMonthExpAmtArray: [...prevState.thisMonthExpAmtArray,item.amount]}))\n       })\n    }).catch(err => console.log(err))\n}\n  render() {\n    return (\n      <div className=\"container\">\n        <form action=\"#\" className=\"form\">\n        <table className=\"tableAdd\">\n        <tbody>\n          <tr>\n            <td><label>Nature of Account</label></td>\n            <td><select id=\"nature\" name=\"nature\" onInput={this.handleNature.bind(this)}>\n                <option value=\"Capital\" defaultChecked>Capital</option>\n                <option value=\"Expenses\">Expenses</option>\n            </select></td>\n          </tr>\n          <tr>\n            <td><label>Amount(in INR)</label></td>\n            <td><input type=\"number\" name=\"amt\" id=\"amt\" onInput={this.handleNAmt.bind(this)}/></td>\n          </tr>\n          <tr>\n            <td><label>Narration</label></td>\n            <td><textarea name=\"narr\" id=\"narr\" cols=\"30\" rows=\"2\" onInput={this.handleNarr.bind(this)}></textarea></td>\n          </tr>\n          </tbody>\n          </table>\n          <button className=\"btnSubmit\" onClick={() => {\n            axios({\n              method: 'POST',\n              url: 'http://localhost:3000/entry/add',\n              data: {\n                nature: this.state.nature,\n                amount: this.state.amt,\n                narration: this.state.narr,\n                date: Date(Date.now()).toString()\n              }\n            }).then(res => console.log(res)).catch(err => console.log(err))\n          }}>Done</button>\n        </form>\n        <Table />\n        <div className=\"stats\">\n          <div id=\"cap\">Total Capital Amount is INR {this.state.capAmt}</div>\n          <div id=\"exp\">Total Expenses Amount is INR {this.state.expAmt}</div>\n          <div id=\"eff\">Net Effective Amount is INR {this.state.capAmt - this.state.expAmt}</div>\n        </div>\n        <Stats capData={this.state.capAmtArray} expData={this.state.expAmtArray} currCap={this.state.thisMonthCapAmtArray} currExp={this.state.thisMonthExpAmtArray}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}